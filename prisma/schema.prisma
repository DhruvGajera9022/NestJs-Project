// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id              Int            @id @default(autoincrement())
  firstName       String
  lastName        String
  email           String         @unique
  password        String
  roleId          Int            @default(2)
  role            Roles          @relation(fields: [roleId], references: [id], onDelete: Cascade)
  profile_picture String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  refreshToken    RefreshToken[]
  resetToken      ResetToken?
  posts           Posts[]
  PostLikes       PostLikes[]
}

model RefreshToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  userId     Int      @unique
  user       Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiryDate DateTime
}

model ResetToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  userId     Int      @unique
  user       Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiryDate DateTime
}

model Roles {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  Users Users[]
}

model Posts {
  id          Int         @id @default(autoincrement())
  userId      Int
  user        Users       @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  content     String
  media_url   String[]    @default([])
  status      PostStatus  @default(PUBLISHED)
  likes_count Int         @default(0)
  views_count Int         @default(0)
  pinned      Boolean     @default(false)
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  PostLikes   PostLikes[]
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model PostLikes {
  postId Int
  userId Int
  post   Posts @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([postId, userId]) // Composite primary key
}
